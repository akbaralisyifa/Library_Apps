// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	books "library/internal/features/books"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddBook provides a mock function with given fields: userID, newBook
func (_m *Service) AddBook(userID uint, newBook books.Books) error {
	ret := _m.Called(userID, newBook)

	if len(ret) == 0 {
		panic("no return value specified for AddBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, books.Books) error); ok {
		r0 = rf(userID, newBook)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBook provides a mock function with given fields: userID, bookID
func (_m *Service) DeleteBook(userID uint, bookID uint) error {
	ret := _m.Called(userID, bookID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(userID, bookID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBook provides a mock function with given fields:
func (_m *Service) GetAllBook() ([]books.Books, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllBook")
	}

	var r0 []books.Books
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]books.Books, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []books.Books); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]books.Books)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBook provides a mock function with given fields: bookID
func (_m *Service) GetBook(bookID uint) (books.Books, error) {
	ret := _m.Called(bookID)

	if len(ret) == 0 {
		panic("no return value specified for GetBook")
	}

	var r0 books.Books
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (books.Books, error)); ok {
		return rf(bookID)
	}
	if rf, ok := ret.Get(0).(func(uint) books.Books); ok {
		r0 = rf(bookID)
	} else {
		r0 = ret.Get(0).(books.Books)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: userID, bookID, updateBook
func (_m *Service) UpdateBook(userID uint, bookID uint, updateBook books.Books) error {
	ret := _m.Called(userID, bookID, updateBook)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, books.Books) error); ok {
		r0 = rf(userID, bookID, updateBook)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
