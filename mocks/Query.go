// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	recomendation "library/internal/features/recomendation"

	mock "github.com/stretchr/testify/mock"
)

// Query is an autogenerated mock type for the Query type
type Query struct {
	mock.Mock
}

// AddRecommend provides a mock function with given fields: newRecommend
func (_m *Query) AddRecommend(newRecommend recomendation.Recomendation) error {
	ret := _m.Called(newRecommend)

	if len(ret) == 0 {
		panic("no return value specified for AddRecommend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(recomendation.Recomendation) error); ok {
		r0 = rf(newRecommend)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRecommend provides a mock function with given fields: recommendID
func (_m *Query) DeleteRecommend(recommendID uint) error {
	ret := _m.Called(recommendID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecommend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(recommendID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllRecommend provides a mock function with given fields:
func (_m *Query) GetAllRecommend() ([]recomendation.Recomendation, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllRecommend")
	}

	var r0 []recomendation.Recomendation
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]recomendation.Recomendation, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []recomendation.Recomendation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]recomendation.Recomendation)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRecommend provides a mock function with given fields: recommendID, updateRecommend
func (_m *Query) UpdateRecommend(recommendID uint, updateRecommend recomendation.Recomendation) error {
	ret := _m.Called(recommendID, updateRecommend)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRecommend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, recomendation.Recomendation) error); ok {
		r0 = rf(recommendID, updateRecommend)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQuery creates a new instance of Query. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *Query {
	mock := &Query{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
